
IMU_sensors_communication_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000488  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000488  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000490  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000494  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000494  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001301  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052f  00000000  00000000  00003335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e07  00000000  00000000  00003b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002222  00000000  00000000  00017992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe89  00000000  00000000  00019bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000590  00000000  00000000  00099a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000470 	.word	0x08000470

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000470 	.word	0x08000470

080001d4 <SysClockConfig>:

#define PLL_M 4
#define PLL_N 84
#define PLL_P 0 // to odpovídá PLLP = 2 (bit17:16 v PLLCFGR)

void SysClockConfig(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	// Enable HSE
	RCC->CR  |= RCC_CR_HSEON;
 80001d8:	4b28      	ldr	r3, [pc, #160]	@ (800027c <SysClockConfig+0xa8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a27      	ldr	r2, [pc, #156]	@ (800027c <SysClockConfig+0xa8>)
 80001de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001e2:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY));
 80001e4:	bf00      	nop
 80001e6:	4b25      	ldr	r3, [pc, #148]	@ (800027c <SysClockConfig+0xa8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d1f9      	bne.n	80001e6 <SysClockConfig+0x12>

	// set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80001f2:	4b22      	ldr	r3, [pc, #136]	@ (800027c <SysClockConfig+0xa8>)
 80001f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001f6:	4a21      	ldr	r2, [pc, #132]	@ (800027c <SysClockConfig+0xa8>)
 80001f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001fc:	6413      	str	r3, [r2, #64]	@ 0x40

	PWR->CR |= PWR_CR_VOS;
 80001fe:	4b20      	ldr	r3, [pc, #128]	@ (8000280 <SysClockConfig+0xac>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a1f      	ldr	r2, [pc, #124]	@ (8000280 <SysClockConfig+0xac>)
 8000204:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000208:	6013      	str	r3, [r2, #0]

	//Flash related
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 800020a:	4b1e      	ldr	r3, [pc, #120]	@ (8000284 <SysClockConfig+0xb0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a1d      	ldr	r2, [pc, #116]	@ (8000284 <SysClockConfig+0xb0>)
 8000210:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000214:	f043 0305 	orr.w	r3, r3, #5
 8000218:	6013      	str	r3, [r2, #0]

	//Prescalers
	//AHB PRes
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800021a:	4b18      	ldr	r3, [pc, #96]	@ (800027c <SysClockConfig+0xa8>)
 800021c:	4a17      	ldr	r2, [pc, #92]	@ (800027c <SysClockConfig+0xa8>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	6093      	str	r3, [r2, #8]

	//APB1_PRes
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000222:	4b16      	ldr	r3, [pc, #88]	@ (800027c <SysClockConfig+0xa8>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4a15      	ldr	r2, [pc, #84]	@ (800027c <SysClockConfig+0xa8>)
 8000228:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800022c:	6093      	str	r3, [r2, #8]

	//APB2
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <SysClockConfig+0xa8>)
 8000230:	4a12      	ldr	r2, [pc, #72]	@ (800027c <SysClockConfig+0xa8>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	6093      	str	r3, [r2, #8]

	//PLL (RCC_PLLCFGR register)
	RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000236:	4b11      	ldr	r3, [pc, #68]	@ (800027c <SysClockConfig+0xa8>)
 8000238:	4a13      	ldr	r2, [pc, #76]	@ (8000288 <SysClockConfig+0xb4>)
 800023a:	605a      	str	r2, [r3, #4]

	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 800023c:	4b0f      	ldr	r3, [pc, #60]	@ (800027c <SysClockConfig+0xa8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0e      	ldr	r2, [pc, #56]	@ (800027c <SysClockConfig+0xa8>)
 8000242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000246:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000248:	bf00      	nop
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <SysClockConfig+0xa8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <SysClockConfig+0x76>

	//Select clock source
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000256:	4b09      	ldr	r3, [pc, #36]	@ (800027c <SysClockConfig+0xa8>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a08      	ldr	r2, [pc, #32]	@ (800027c <SysClockConfig+0xa8>)
 800025c:	f043 0302 	orr.w	r3, r3, #2
 8000260:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000262:	bf00      	nop
 8000264:	4b05      	ldr	r3, [pc, #20]	@ (800027c <SysClockConfig+0xa8>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	f003 030c 	and.w	r3, r3, #12
 800026c:	2b08      	cmp	r3, #8
 800026e:	d1f9      	bne.n	8000264 <SysClockConfig+0x90>



}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40023800 	.word	0x40023800
 8000280:	40007000 	.word	0x40007000
 8000284:	40023c00 	.word	0x40023c00
 8000288:	00401504 	.word	0x00401504

0800028c <delay>:
void delay(uint32_t time){
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	while(time--);
 8000294:	bf00      	nop
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	1e5a      	subs	r2, r3, #1
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1fa      	bne.n	8000296 <delay+0xa>
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <GPIO_Config>:

void GPIO_Config(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	//Enable GPIO clock
	RCC->AHB1ENR |= (1<<0);
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <GPIO_Config+0x34>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <GPIO_Config+0x34>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set p5 as a output¨
	GPIOA->MODER |= (1<<10);
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <GPIO_Config+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	@ (80002e8 <GPIO_Config+0x38>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ca:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER = 0;
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <GPIO_Config+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR = 0;
 80002d2:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <GPIO_Config+0x38>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]

}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000

080002ec <main>:

int main(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SysClockConfig();
 80002f0:	f7ff ff70 	bl	80001d4 <SysClockConfig>
	GPIO_Config();
 80002f4:	f7ff ffdc 	bl	80002b0 <GPIO_Config>
	while(1){
		GPIOA->BSRR |= (1<<5);
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <main+0x34>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <main+0x34>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
		delay(1000000);
 8000304:	4807      	ldr	r0, [pc, #28]	@ (8000324 <main+0x38>)
 8000306:	f7ff ffc1 	bl	800028c <delay>
		GPIOA->BSRR |= (1<<5)<<16;
 800030a:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <main+0x34>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <main+0x34>)
 8000310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000314:	6193      	str	r3, [r2, #24]
		delay(1000000);
 8000316:	4803      	ldr	r0, [pc, #12]	@ (8000324 <main+0x38>)
 8000318:	f7ff ffb8 	bl	800028c <delay>
		GPIOA->BSRR |= (1<<5);
 800031c:	bf00      	nop
 800031e:	e7eb      	b.n	80002f8 <main+0xc>
 8000320:	40020000 	.word	0x40020000
 8000324:	000f4240 	.word	0x000f4240

08000328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <NMI_Handler+0x4>

08000330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <MemManage_Handler+0x4>

08000340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <UsageFault_Handler+0x4>

08000350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037e:	f000 f83f 	bl	8000400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <SystemInit+0x20>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000392:	4a05      	ldr	r2, [pc, #20]	@ (80003a8 <SystemInit+0x20>)
 8000394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003b0:	f7ff ffea 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	@ (80003ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	@ (80003f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 f825 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f7ff ff85 	bl	80002ec <main>
  bx  lr    
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f0:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f8:	20000024 	.word	0x20000024

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <HAL_IncTick+0x20>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <HAL_IncTick+0x24>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	4a04      	ldr	r2, [pc, #16]	@ (8000424 <HAL_IncTick+0x24>)
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	20000020 	.word	0x20000020

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4d0d      	ldr	r5, [pc, #52]	@ (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	@ (8000464 <__libc_init_array+0x3c>)
 800042e:	1b64      	subs	r4, r4, r5
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2600      	movs	r6, #0
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4d0b      	ldr	r5, [pc, #44]	@ (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	@ (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2600      	movs	r6, #0
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
